diff --git a/libavcodec/h264.c b/libavcodec/h264.c
index 8625b0f..e862701 100644
--- a/libavcodec/h264.c
+++ b/libavcodec/h264.c
@@ -2164,6 +2164,7 @@ static void flush_dpb(AVCodecContext *avctx)
 
     flush_change(h);
     ff_mpeg_flush(avctx);
+    h->recovery_frame= -1;
 }
 
 static int init_poc(H264Context *h)
@@ -4001,9 +4002,18 @@ again:
                 if ((err = decode_slice_header(hx, h)))
                     break;
 
+                if (h->sei_recovery_frame_cnt >= 0 && h->recovery_frame < 0) {
+                    h->recovery_frame = (h->frame_num + h->sei_recovery_frame_cnt) %
+                                        (1 << h->sps.log2_max_frame_num);
+                }
+
                 s->current_picture_ptr->f.key_frame |=
-                    (hx->nal_unit_type == NAL_IDR_SLICE) ||
-                    (h->sei_recovery_frame_cnt >= 0);
+                        (hx->nal_unit_type == NAL_IDR_SLICE);
+
+                if (h->recovery_frame == h->frame_num) {
+                    s->current_picture_ptr->f.key_frame |= 1;
+                    h->recovery_frame = -1;
+                }
 
                 if (h->current_slice == 1) {
                     if (!(s->flags2 & CODEC_FLAG2_CHUNKS))
diff --git a/libavcodec/h264.h b/libavcodec/h264.h
index 898ebf7..42aaa6f 100644
--- a/libavcodec/h264.h
+++ b/libavcodec/h264.h
@@ -568,6 +568,13 @@ typedef struct H264Context {
      * frames.
      */
     int sei_recovery_frame_cnt;
+    /**
+     * recovery_frame is the frame_num at which the next frame should
+     * be fully constructed.
+     *
+     * Set to -1 when not expecting a recovery point.
+     */
+    int recovery_frame;
 
     int luma_weight_flag[2];    ///< 7.4.3.2 luma_weight_lX_flag
     int chroma_weight_flag[2];  ///< 7.4.3.2 chroma_weight_lX_flag
diff --git a/libavcodec/h264_sei.c b/libavcodec/h264_sei.c
index 2e5fb65..ea33a18 100644
--- a/libavcodec/h264_sei.c
+++ b/libavcodec/h264_sei.c
@@ -38,6 +38,7 @@ static const uint8_t sei_num_clock_ts_table[9]={
 };
 
 void ff_h264_reset_sei(H264Context *h) {
+    h->recovery_frame               = -1;
     h->sei_recovery_frame_cnt       = -1;
     h->sei_dpb_output_delay         =  0;
     h->sei_cpb_removal_delay        = -1;

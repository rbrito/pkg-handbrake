$(eval $(call import.MODULE.defs,MACOSX,macosx))
$(eval $(call import.GCC,MACOSX))

MACOSX.src/   = $(SRC/)macosx/
MACOSX.build/ = $(BUILD/)macosx/

MACOSX.m4.in  = $(wildcard $(MACOSX.src/)*.m4)
MACOSX.m4.out = $(MACOSX.m4.in:$(MACOSX.src/)%.m4=$(MACOSX.build/)%)

###############################################################################

BUILD.out += $(MACOSX.m4.out)
BUILD.out += $(MACOSX.m4.wc.out)

###############################################################################

MACOSX.project = -project $(MACOSX.src/)HandBrake.xcodeproj

## configuration: must be one of { release, debug }
MACOSX.configuration = -configuration $(MACOSX.map.g.$(MACOSX.GCC.g))

## mapping from symbolic debug value to xcode configuration
MACOSX.map.g.none = release
MACOSX.map.g.min  = debug
MACOSX.map.g.std  = debug
MACOSX.map.g.max  = debug

ifeq (1,$(FEATURE.fdk_aac))
MACOSX.extra_ldflags = OTHER_LDFLAGS='$(abspath $(BUILD))/contrib/lib/libfdk-aac.a'
endif

## xcconfig: must be one of macosx/xcconfig/*.xcconfig
MACOSX.xcconfig = $(foreach x,$(XCODE.xcconfig),-xcconfig $(MACOSX.src/)xcconfig/$(x))
MACOSX.sdk      = $(foreach sdk,$(GCC.sysroot),-sdk $(sdk))

## launch a build thru xcode; which in turn will do a nested make against
## this build system with normal build rules enabled.
##
## $(1) = list of targets
## $(2) = list of goals to shunt thru xcodebuild->make
##

MACOSX.XCODE = $(strip \
    $(XCODEBUILD.exe) \
        $(MACOSX.project) \
        $(foreach t,$(1),-target $t) \
        $(MACOSX.configuration) \
        $(MACOSX.xcconfig) \
        \
        SYMROOT='$(XCODE.symroot)' \
        CONFIGURATION_BUILD_DIR='$(XCODE.symroot)' \
        CONFIGURATION_TEMP_DIR='$(XCODE.symroot)' \
        \
        EXTERNAL_BUILD='$(abspath $(BUILD))' \
        EXTERNAL_CONF_ARGS='$(CONF.args)' \
        EXTERNAL_DRIVER='$(XCODE.driver)' \
        EXTERNAL_GOALS='$(3)' \
        EXTERNAL_JOBS='$(BUILD.jobs)' \
        EXTERNAL_VARS='$(-*-command-variables-*-)' \
        \
        $(MACOSX.extra_ldflags) \
        \
        $(2) )
